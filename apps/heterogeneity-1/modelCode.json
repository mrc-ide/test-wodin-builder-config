{"status":"success","errors":null,"data":{"valid":true,"metadata":{"variables":["S_f","S_m","I_f","I_m","PopSize","prevalence_f","prevalence_m","prevalence_tot","newInf_f","newInf_m","incidence_tot"],"parameters":[{"name":"betaMW_1c","default":0.5,"min":null,"max":null,"is_integer":false,"rank":0},{"name":"betaWM_1c","default":0.5,"min":null,"max":null,"is_integer":false,"rank":0},{"name":"pcr_1c","default":2,"min":null,"max":null,"is_integer":false,"rank":0},{"name":"recovery_1c","default":2,"min":null,"max":null,"is_integer":false,"rank":0}],"dt":null,"messages":[]},"model":"\"use strict\";\nclass odin {\n  constructor(base, user, unusedUserAction) {\n    this.base = base;\n    this.internal = {};\n    var internal = this.internal;\n    internal.initial_I_f = 10;\n    internal.initial_I_m = 10;\n    internal.initial_S_f = 99990;\n    internal.initial_S_m = 99990;\n    this.setUser(user, unusedUserAction);\n  }\n  initial(t) {\n    var internal = this.internal;\n    var state = Array(4).fill(0);\n    state[0] = internal.initial_S_f;\n    state[1] = internal.initial_S_m;\n    state[2] = internal.initial_I_f;\n    state[3] = internal.initial_I_m;\n    return state;\n  }\n  setUser(user, unusedUserAction) {\n    this.base.user.checkUser(user, [\"betaMW_1c\", \"betaWM_1c\", \"pcr_1c\", \"recovery_1c\"], unusedUserAction);\n    var internal = this.internal;\n    this.base.user.setUserScalar(user, \"betaMW_1c\", internal, 0.5, -Infinity, Infinity, false);\n    this.base.user.setUserScalar(user, \"betaWM_1c\", internal, 0.5, -Infinity, Infinity, false);\n    this.base.user.setUserScalar(user, \"pcr_1c\", internal, 2, -Infinity, Infinity, false);\n    this.base.user.setUserScalar(user, \"recovery_1c\", internal, 2, -Infinity, Infinity, false);\n    this.updateMetadata();\n  }\n  getInternal() {\n    return this.internal;\n  }\n  rhs(t, state, dstatedt) {\n    var internal = this.internal;\n    const S_f = state[0];\n    const S_m = state[1];\n    const I_f = state[2];\n    const I_m = state[3];\n    var N_f = S_f + I_f;\n    var N_m = S_m + I_m;\n    dstatedt[2] = internal.betaMW_1c * internal.pcr_1c * S_f * I_m / N_m - internal.recovery_1c * I_f;\n    dstatedt[3] = internal.betaWM_1c * internal.pcr_1c * S_m * I_f / N_f - internal.recovery_1c * I_m;\n    dstatedt[0] = - internal.betaMW_1c * internal.pcr_1c * S_f * I_m / N_m + internal.recovery_1c * I_f;\n    dstatedt[1] = - internal.betaWM_1c * internal.pcr_1c * S_m * I_f / N_f + internal.recovery_1c * I_m;\n  }\n  output(t, state) {\n    var internal = this.internal;\n    var output = new Array(7);\n    const S_f = state[0];\n    const S_m = state[1];\n    const I_f = state[2];\n    const I_m = state[3];\n    var N_f = S_f + I_f;\n    var N_m = S_m + I_m;\n    var N_tot = N_f + N_m;\n    output[6] = internal.betaMW_1c * internal.pcr_1c * S_f * I_m / N_m + internal.betaWM_1c * internal.pcr_1c * S_m * I_f / N_f;\n    output[4] = internal.betaMW_1c * internal.pcr_1c * S_f * I_m / N_m;\n    output[5] = internal.betaWM_1c * internal.pcr_1c * S_m * I_f / N_f;\n    output[0] = N_f + N_m;\n    output[1] = I_f / N_f;\n    output[2] = I_m / N_m;\n    output[3] = (I_f + I_m) / N_tot;\n    return output;\n  }\n  names() {\n    return this.metadata.ynames.slice(1);\n  }\n  updateMetadata() {\n    this.metadata = {};\n    var internal = this.internal;\n    this.metadata.ynames = [\"t\", \"S_f\", \"S_m\", \"I_f\", \"I_m\", \"PopSize\", \"prevalence_f\", \"prevalence_m\", \"prevalence_tot\", \"newInf_f\", \"newInf_m\", \"incidence_tot\"];\n    this.metadata.internalOrder = {betaMW_1c: null, betaWM_1c: null, initial_I_f: null, initial_I_m: null, initial_S_f: null, initial_S_m: null, pcr_1c: null, recovery_1c: null};\n    this.metadata.variableOrder = {S_f: null, S_m: null, I_f: null, I_m: null};\n    this.metadata.outputOrder = {PopSize: null, prevalence_f: null, prevalence_m: null, prevalence_tot: null, newInf_f: null, newInf_m: null, incidence_tot: null};\n  }\n  getMetadata() {\n    return this.metadata;\n  }\n}\nodin;"}}