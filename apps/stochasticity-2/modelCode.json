{"status":"success","errors":null,"data":{"valid":true,"metadata":{"variables":["N_det","N","extinct"],"parameters":[{"name":"N_init","default":1,"min":null,"max":null,"is_integer":false,"rank":0},{"name":"r","default":0.1,"min":null,"max":null,"is_integer":false,"rank":0},{"name":"s","default":0.06,"min":null,"max":null,"is_integer":false,"rank":0}],"dt":0.01,"messages":[]},"model":"\"use strict\";\nclass odin {\n  constructor(base, user, unusedUserAction) {\n    this.base = base;\n    this.internal = {};\n    var internal = this.internal;\n    internal.dt = 0.01;\n    this.setUser(user, unusedUserAction);\n  }\n  initial(step) {\n    var internal = this.internal;\n    var state = Array(3).fill(0);\n    state[0] = internal.initial_N_det;\n    state[1] = internal.initial_N;\n    state[2] = internal.initial_extinct;\n    return state;\n  }\n  setUser(user, unusedUserAction) {\n    this.base.user.checkUser(user, [\"N_init\", \"r\", \"s\"], unusedUserAction);\n    var internal = this.internal;\n    this.base.user.setUserScalar(user, \"N_init\", internal, 1, -Infinity, Infinity, false);\n    this.base.user.setUserScalar(user, \"r\", internal, 0.10000000000000001, -Infinity, Infinity, false);\n    this.base.user.setUserScalar(user, \"s\", internal, 0.059999999999999998, -Infinity, Infinity, false);\n    internal.initial_N = internal.N_init;\n    internal.initial_N_det = internal.N_init;\n    internal.initial_extinct = internal.initial_N == 0;\n  }\n  getInternal() {\n    return this.internal;\n  }\n  update(step, state, state_next, random) {\n    var internal = this.internal;\n    const N = state[1];\n    var growthAndDeath = random.binomial(this.base.maths.round2(N), (internal.r + internal.s) * internal.dt);\n    var time = step * internal.dt;\n    state_next[2] = N == 0;\n    var death = random.binomial(this.base.maths.round2(growthAndDeath), internal.s / (internal.r + internal.s));\n    state_next[0] = internal.N_init * Math.exp((internal.r - internal.s) * time);\n    var growth = growthAndDeath - death;\n    state_next[1] = N + growth - death;\n  }\n  info() {\n    const ret = [];\n    const internal = this.internal;\n    ret.push({ dim: [], length: 1, name: \"N_det\"});\n    ret.push({ dim: [], length: 1, name: \"N\"});\n    ret.push({ dim: [], length: 1, name: \"extinct\"});\n    return ret;\n  }\n  size() {\n    const internal = this.internal;\n    return 3;\n  }\n}\nodin;"}}