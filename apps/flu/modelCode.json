{"status":"success","errors":null,"data":{"valid":true,"metadata":{"variables":["S","E","I","R","onset"],"parameters":[{"name":"D","default":1,"min":null,"max":null,"is_integer":false,"rank":0},{"name":"L","default":1,"min":null,"max":null,"is_integer":false,"rank":0},{"name":"R_0","default":1.5,"min":null,"max":null,"is_integer":false,"rank":0}],"dt":null,"messages":[]},"model":"\"use strict\";\nclass odin {\n  constructor(base, user, unusedUserAction) {\n    this.base = base;\n    this.internal = {};\n    var internal = this.internal;\n    internal.I_0 = 1;\n    internal.initial_E = 0;\n    internal.initial_R = 0;\n    internal.N = 370;\n    internal.initial_I = internal.I_0;\n    internal.initial_S = internal.N - internal.I_0;\n    this.setUser(user, unusedUserAction);\n  }\n  initial(t) {\n    var internal = this.internal;\n    var state = Array(4).fill(0);\n    state[0] = internal.initial_S;\n    state[1] = internal.initial_E;\n    state[2] = internal.initial_I;\n    state[3] = internal.initial_R;\n    return state;\n  }\n  setUser(user, unusedUserAction) {\n    this.base.user.checkUser(user, [\"D\", \"L\", \"R_0\"], unusedUserAction);\n    var internal = this.internal;\n    this.base.user.setUserScalar(user, \"D\", internal, 1, -Infinity, Infinity, false);\n    this.base.user.setUserScalar(user, \"L\", internal, 1, -Infinity, Infinity, false);\n    this.base.user.setUserScalar(user, \"R_0\", internal, 1.5, -Infinity, Infinity, false);\n    internal.gamma = 1 / internal.L;\n    internal.sigma = 1 / internal.D;\n    internal.beta = internal.R_0 * internal.sigma;\n    this.updateMetadata();\n  }\n  getInternal() {\n    return this.internal;\n  }\n  rhs(t, state, dstatedt) {\n    var internal = this.internal;\n    const S = state[0];\n    const E = state[1];\n    const I = state[2];\n    dstatedt[2] = internal.gamma * E - internal.sigma * I;\n    dstatedt[3] = internal.sigma * I;\n    dstatedt[1] = internal.beta * S * I / internal.N - internal.gamma * E;\n    dstatedt[0] = - internal.beta * S * I / internal.N;\n  }\n  output(t, state) {\n    var internal = this.internal;\n    var output = new Array(1);\n    const E = state[1];\n    output[0] = (t == 0 ? internal.I_0 : internal.gamma * E);\n    return output;\n  }\n  names() {\n    return this.metadata.ynames.slice(1);\n  }\n  updateMetadata() {\n    this.metadata = {};\n    var internal = this.internal;\n    this.metadata.ynames = [\"t\", \"S\", \"E\", \"I\", \"R\", \"onset\"];\n    this.metadata.internalOrder = {beta: null, D: null, gamma: null, I_0: null, initial_E: null, initial_I: null, initial_R: null, initial_S: null, L: null, N: null, R_0: null, sigma: null};\n    this.metadata.variableOrder = {S: null, E: null, I: null, R: null};\n    this.metadata.outputOrder = {onset: null};\n  }\n  getMetadata() {\n    return this.metadata;\n  }\n}\nodin;"}}