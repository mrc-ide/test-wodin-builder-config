{"status":"success","errors":null,"data":{"endTime":100,"readOnlyCode":true,"stateUploadIntervalMillis":2000,"maxReplicatesRun":1000,"maxReplicatesDisplay":50,"appType":"stochastic","title":"Stochasticity: SIR","help":{"tabName":"Explanation","markdown":["## Example 4: Stochastic SIR model","","This model investigates the behaviour of a Susceptible-Infected-Recovered (SIR) model. The code to do this in `odin` can be easily adapted from the SIS code.","","Compared to the SIS model, the SIR model has one extra compartment, $R$, representing recovered, immune individuals and four extra events: death of susceptible, infected and recovered individuals at rate $\\mu$, and birth of new susceptibles at rate $B$. To simplify, in any time period, we can make the number of births equal to the sum of the number of deaths. This keeps the total population constant.","","The possible events for the SIR system are therefore:","","* Infection (S $\\rightarrow$ I) at rate  $\\beta I / N$","* Recovery (I $\\rightarrow$ S)  at rate  $\\sigma$","* Death of susceptible (S $\\rightarrow$ ) at rate $\\mu$","* Death of infected (I $\\rightarrow$ ) at rate $\\mu$","* Death of recovered (R $\\rightarrow$ ) at rate $\\mu$","* Births ( $\\rightarrow$ S) at rate $B = \\mu N$","","Note that there are two competing hazards for $S$ (death and infection) and for $I$ (death and recovery). For this system,","","$$ R_0  = \\frac{\\beta} {\\mu + \\sigma} $$","","and the new equilibria are:","","$$ S^* = \\frac{1} {R_0} $$","$$ I^* = \\frac{N \\mu} {\\beta}  (R_0-1) $$",""]},"defaultCode":["beta <- user(0.5)      # Contact rate","sigma <- user(0.3)     # Recovery rate","mu <- user(0.00038)    # Death rate","prop_immune <- user(0) # Proportion of population initially immune","N <- user(10000)       # Total population.","I_init <- user(5)      # Initial infecteds","","# Derive initial susceptibles from this:","S_init <- (N - I_init) * (1 - prop_immune)","","initialise_at_steady_state <- user(0, integer = TRUE, min = 0, max = 1)","","dt <- 0.01","","# Steady-state prevelance","R0 <- beta / (sigma + mu)","# Number of infecteds at endemic equilibrium state","I_star <- N * mu * (beta - sigma - mu) / (beta * (mu + sigma))","# Number of susceptibles at endemic equilibrium state","S_star <- N / R0","","# Stochastic solution","initial(S) <- if (initialise_at_steady_state == 1) round(S_star) else S_init","initial(I) <- if (initialise_at_steady_state == 1) round(I_star) else I_init","initial(R) <- if (initialise_at_steady_state == 1) N - round(I_star) - round(S_star) else N - I_init - S_init","","FOI <- beta * I / N","","# Two types of events for S, so competing hazards.","n_events_S <- rbinom(S, (FOI + mu) * dt)","# A fraction of S events are deaths...","n_deaths_S <- rbinom(n_events_S, mu/(FOI + mu))","# ...and the rest are infections.","n_infections_S <- n_events_S - n_deaths_S","","# Two types of events for I, so competing hazards.","n_events_I <- rbinom(I, (sigma + mu) * dt)","# A fraction of I events are deaths...","n_deaths_I <- rbinom(n_events_I, mu / (mu + sigma))","# ...the rest are recoveries.","n_recoveries_I <- n_events_I - n_deaths_I","","n_deaths_R <- rbinom(R, mu * dt)","n_births <- n_deaths_S + n_deaths_I + n_deaths_R","","# update for next time step","update(S) <- S - n_deaths_S - n_infections_S + n_births","update(I) <- I + n_infections_S - n_recoveries_I - n_deaths_I","update(R) <- R + n_recoveries_I - n_deaths_R","","initial(extinct) <- I == 0","update(extinct) <- I == 0",""]}}